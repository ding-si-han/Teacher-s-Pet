import { Driver } from '@cycle/run';
export declare type PoseNetParameters = {
    algorithm: string;
    input: {
        mobileNetArchitecture: string;
        outputStride: number;
        imageScaleFactor: number;
    };
    singlePoseDetection: {
        minPoseConfidence: number;
        minPartConfidence: number;
    };
    multiPoseDetection: {
        maxPoseDetections: number;
        minPoseConfidence: number;
        minPartConfidence: number;
        nmsRadius: number;
    };
    output: {
        showVideo: boolean;
        showSkeleton: boolean;
        showPoints: boolean;
    };
    net: any;
    changeToArchitecture: string;
    fps: number;
    stopRequested: boolean;
};
/**
 * [PoseNet](https://github.com/tensorflow/tfjs-models/tree/master/posenet)
 * driver factory.
 *
 * @param options possible key includes
 *
 *   * videoWidth {number} An optional video height (default: 640).
 *   * videoWidth {number} An optional video width (default: 480).
 *   * flipHorizontal {boolean} An optional flag for horizontally flipping the
 *     video (default: true).
 *
 * @return {Driver} the PoseNet Cycle.js driver function. It takes a stream
 *   of [`PoseNetParameters`](./src/pose_detection.tsx) and returns a stream of
 *   [`Pose` arrays](https://github.com/tensorflow/tfjs-models/tree/master/posenet#via-npm).
 *
 */
export declare function makePoseDetectionDriver({videoWidth, videoHeight, flipHorizontal}?: {
    videoWidth?: number;
    videoHeight?: number;
    flipHorizontal?: boolean;
}): Driver<any, {
    DOM: any;
    poses: any;
}>;
