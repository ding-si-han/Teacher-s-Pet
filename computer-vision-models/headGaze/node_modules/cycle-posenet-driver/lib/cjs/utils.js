"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
// Canvas related; adapted from
//   https://github.com/tensorflow/tfjs-models/blob/fc0a80d8ddbd2845fca4a61355dc5c54d1b43e0d/posenet/demos/demo_util.js#L17-L73
var posenet = __importStar(require("@tensorflow-models/posenet"));
var color = 'aqua';
var lineWidth = 2;
function toTuple(_a) {
    var y = _a.y, x = _a.x;
    return [y, x];
}
function drawPoint(ctx, y, x, r, color) {
    ctx.beginPath();
    ctx.arc(x, y, r, 0, 2 * Math.PI);
    ctx.fillStyle = color;
    ctx.fill();
}
exports.drawPoint = drawPoint;
// Draws a line on a canvas, i.e. a joint
function drawSegment(_a, _b, color, scale, ctx) {
    var ay = _a[0], ax = _a[1];
    var by = _b[0], bx = _b[1];
    ctx.beginPath();
    ctx.moveTo(ax * scale, ay * scale);
    ctx.lineTo(bx * scale, by * scale);
    ctx.lineWidth = lineWidth;
    ctx.strokeStyle = color;
    ctx.stroke();
}
exports.drawSegment = drawSegment;
// Draws a pose skeleton by looking up all adjacent keypoints/joints
function drawSkeleton(keypoints, minConfidence, ctx, scale) {
    if (scale === void 0) { scale = 1; }
    var adjacentKeyPoints = posenet.getAdjacentKeyPoints(keypoints, minConfidence);
    adjacentKeyPoints.forEach(function (keypoints) {
        drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), color, scale, ctx);
    });
}
exports.drawSkeleton = drawSkeleton;
// Draw pose keypoints onto a canvas
function drawKeypoints(keypoints, minConfidence, ctx, scale) {
    if (scale === void 0) { scale = 1; }
    for (var i = 0; i < keypoints.length; i++) {
        var keypoint = keypoints[i];
        if (keypoint.score < minConfidence) {
            continue;
        }
        var _a = keypoint.position, y = _a.y, x = _a.x;
        drawPoint(ctx, y * scale, x * scale, 3, color);
    }
}
exports.drawKeypoints = drawKeypoints;
//------------------------------------------------------------------------------
// Camera related; adapted from
//   https://github.com/tensorflow/tfjs-models/blob/fc0a80d8ddbd2845fca4a61355dc5c54d1b43e0d/posenet/demos/camera.js#L26-L68
exports.isAndroid = function () {
    return /Android/i.test(navigator.userAgent);
};
exports.isiOS = function () {
    return /iPhone|iPad|iPod/i.test(navigator.userAgent);
};
exports.isMobile = function () {
    return exports.isAndroid() || exports.isiOS();
};
exports.setupCamera = function (video, videoWidth, videoHeight) { return __awaiter(_this, void 0, void 0, function () {
    var mobile, stream;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    throw 'Browser API navigator.mediaDevices.getUserMedia not available';
                }
                video.width = videoWidth;
                video.height = videoHeight;
                mobile = exports.isMobile();
                return [4 /*yield*/, navigator.mediaDevices.getUserMedia({
                        'audio': false,
                        'video': {
                            facingMode: 'user',
                            width: mobile ? undefined : videoWidth,
                            height: mobile ? undefined : videoHeight
                        }
                    })];
            case 1:
                stream = _a.sent();
                video.srcObject = stream;
                return [2 /*return*/, new Promise(function (resolve) {
                        video.onloadedmetadata = function () {
                            resolve(video);
                        };
                    })];
        }
    });
}); };
//# sourceMappingURL=utils.js.map